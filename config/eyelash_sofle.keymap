#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    as_ht: autoshift_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "AUTOSHIFT_HOLD_TAP";
        bindings = <&shifted>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <250>;
        flavor = "tap-preferred";
    };

    td0: Shift_Cap {
        compatible = "zmk,behavior-tap-dance";
        label = "Shift/Cap";
        #binding-cells = <0>;
        bindings = <&kp LSHIFT>, <&kp CAPS>;
    };

    TDL0: QWERTY_TD {
        compatible = "zmk,behavior-tap-dance";
        label = "QWERTY TD";
        #binding-cells = <0>;
        bindings =
            <&rgb_mo 0 RGB_COLOR_HSB_VAL(7,100,50)>,
            <&rgb_to 0 RGB_COLOR_HSB_VAL(0,100,50)>;
    };

    TDL1: NUM_TD {
        compatible = "zmk,behavior-tap-dance";
        label = "NUM TD";
        #binding-cells = <0>;
        bindings =
            <&rgb_mo 1 RGB_COLOR_HSB_VAL(232,100,50)>,
            <&rgb_to 1 RGB_COLOR_HSB_VAL(235,100,50)>;
    };

    TDL2: Media_TD {
        compatible = "zmk,behavior-tap-dance";
        label = "Media TD";
        #binding-cells = <0>;
        bindings =
            <&rgb_mo 2 RGB_COLOR_HSB_VAL(120,100,50)>,
            <&rgb_to 2 RGB_COLOR_HSB_VAL(126,100,50)>;
    };

    TDL3: Other_TD {
        compatible = "zmk,behavior-tap-dance";
        label = "Other TD";
        #binding-cells = <0>;
        bindings =
            <&rgb_mo 3 RGB_COLOR_HSB_VAL(289,100,50)>,
            <&rgb_to 3 RGB_COLOR_HSB_VAL(289,100,50)>;
    };

    macros {
        shifted: shifted {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT &macro_param_1to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;

            label = "SHIFTED";
        };

        as: as {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "AS";
        };

        rgb_mo: rgb_mo {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_param_2to2 &rgb_ug RGB_COLOR_HSB_CMD MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&rgb_ug RGB_COLOR_HSB(0,100,51)>;

            label = "RGB_MO";
        };

        rgb_to: rgb_to {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &to MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_param_2to2 &rgb_ug RGB_COLOR_HSB_CMD MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &to MACRO_PLACEHOLDER>,
                <&macro_tap>;

            label = "RGB_TO";
        };
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        Lock {
            bindings = <&kp RG(L)>;
            key-positions = <60 62>;
        };

        L_Brace {
            bindings = <&as LEFT_BRACKET>;
            key-positions = <24 23>;
        };

        R_Brace {
            bindings = <&kp RG(RIGHT_BRACKET)>;
            key-positions = <24 25>;
        };

        Minus {
            bindings = <&as MINUS>;
            key-positions = <9 10>;
        };

        Plus {
            bindings = <&as PLUS>;
            key-positions = <10 11>;
        };

        Copy {
            bindings = <&kp K_COPY>;
            key-positions = <41 42>;
        };

        Paste {
            bindings = <&as K_PASTE>;
            key-positions = <43 42>;
        };

        Paste_Win {
            bindings = <&kp LG(P)>;
            key-positions = <44 43>;
        };

        Cut {
            bindings = <&kp K_CUT>;
            key-positions = <40 41>;
        };

        Undo {
            bindings = <&kp K_UNDO>;
            key-positions = <40 39>;
        };

        New_Tab {
            bindings = <&kp LC(T)>;
            key-positions = <18 17>;
        };

        Undo_Tab {
            bindings = <&kp LS(LC(T))>;
            key-positions = <18 16>;
        };

        Close_Tab {
            bindings = <&kp LC(W)>;
            key-positions = <14 15>;
        };

        PaG_UP {
            bindings = <&kp PG_UP>;
            key-positions = <37 38>;
        };

        PaG_DN {
            bindings = <&kp PAGE_DOWN>;
            key-positions = <51 50>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        QWERTY {
            bindings = <
&kp ESC           &as N1  &as N2  &as N3        &as N4        &as N5       &kp UP_ARROW     &as N6   &as N7         &as N8         &as N9     &as N0      &kp BACKSPACE
&kp TAB           &as Q   &as W   &as E         &as R         &as T        &kp DOWN_ARROW   &as Y    &as U          &as I          &as O      &as P       &as BSLH
&kp LEFT_CONTROL  &as A   &as S   &as D         &as F         &as G        &kp LEFT_ARROW   &as H    &as J          &as K          &as L      &as SEMI    &as APOS
&td0              &as Z   &as X   &as C         &as V         &as B        &kp RIGHT_ARROW  &as N    &as M          &as COMMA      &as DOT    &as FSLH    &mt RIGHT_SHIFT KP_ENTER
&kp C_MUTE        &TDL2   &TDL1   &kp LEFT_ALT  &kp LEFT_GUI  &kp SPACE    &kp ENTER        &kp RET  &kp RIGHT_GUI  &kp RIGHT_ALT  &kp TILDE  &kp DELETE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "QWERTY";
        };

        Number {
            bindings = <
&kp LA(LC(DELETE))  &rgb_ug RGB_TOG  &rgb_ug RGB_HUI  &rgb_ug RGB_HUD                        &rgb_ug RGB_BRI                          &rgb_ug RGB_BRD    &mmv MOVE_UP     &kp HOME   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp END    &trans
&bt BT_CLR          &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2                           &bt BT_SEL 3                             &bt BT_SEL 4       &mmv MOVE_DOWN   &trans     &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp PG_UP  &trans
&out OUT_TOG        &trans           &trans           &trans                                 &trans                                   &trans             &mmv MOVE_LEFT   &trans     &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PG_DN  &trans
&trans              &rgb_ug RGB_OFF  &rgb_ug RGB_ON   &rgb_ug RGB_EFF                        &rgb_ug RGB_EFR                          &rgb_ug RGB_SPI    &mmv MOVE_RIGHT  &mkp RCLK  &trans           &kp KP_NUMBER_0  &trans           &trans     &trans
&kp C_MUTE          &trans           &trans           &rgb_to 0 RGB_COLOR_HSB_VAL(0,100,50)  &rgb_to 2 RGB_COLOR_HSB_VAL(114,100,50)  &trans             &mkp LCLK        &trans     &trans           &trans           &trans           &trans
            >;

            display-name = "Number";
            sensor-bindings = <&rgb_encoder>;
        };

        Media {
            bindings = <
&trans              &trans              &trans        &trans                                 &trans                                   &trans               &kp UP_ARROW    &kp F1  &kp F2   &kp F3   &kp F4   &trans  &trans
&trans              &trans              &trans        &trans                                 &trans                                   &trans               &kp DOWN_ARROW  &kp F5  &kp F6   &kp F7   &kp F8   &trans  &trans
&kp LA(LC(LEFT))    &kp L               &kp P         &kp N                                  &kp F                                    &kp RA(RC(RIGHT))    &kp LEFT        &kp F9  &kp F10  &kp F11  &kp F12  &trans  &trans
&kp LC(LEFT_ARROW)  &kp LA(LEFT_ARROW)  &kp LS(LEFT)  &kp RS(RIGHT)                          &kp RA(RIGHT)                            &kp RC(RIGHT)        &kp RIGHT       &trans  &trans   &trans   &trans   &trans  &trans
&kp C_MUTE          &trans              &trans        &rgb_to 0 RGB_COLOR_HSB_VAL(0,100,50)  &rgb_to 1 RGB_COLOR_HSB_VAL(236,100,50)  &trans               &kp SPACE       &trans  &trans   &trans   &trans   &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
